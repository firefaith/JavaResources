目标
    面向对象介绍(OOP)
    对象、消息传递、类
    创建类--(属性、方法)
    类与对象的区别
    编写类的思路(抽象、封装)
    定义类、定义对象
    定义对象的关键方法----构造方法
    面向对象分析与设计方法--UML   
	
1、面向对象介绍(OOP)
   找出教室中所有看的见，摸的着的事物：人、桌子、凳子、投影、电脑、笔、本子、水杯......
   
   在程序中模拟教室中的事物以及相互的关系
    人<--(使用)-->桌子
	
	人:学员、老师
	
	要求，编写一段程序，完整的描述一堂课上，老师与学员所做的事情。
	使用  OOP  的思想描述上述过程，先找出独立的个体
	老师：讲课、提问、解答
	学员：听课、提问、做笔记
	
	先创建独立的个体，一个老师、多个学员，然后让老师这个个体做对应的方法，
	
	老师  ---(提问)----> 学员  
	      <--- 回答----
	
	
	学员1：
	学员2：...
	
	
	用 OOP 的思想描述打电话的过程
	打电话的人 A：拨号、讲话、挂机
	接电话的人 B：接听、讲话、挂机
	交互：A ---(拨号)---> B <---(接听)--->
	      A <----(讲话)----> B
		  A ----(挂机)-----> B
		  
		  
		   返回值 拨号("110"){
		     拨打对应的号，
			 点击拨打，
			 拨通;
		  }
		  
		  返回值  炒菜(菜名){
		      买菜；
			  洗菜
			  切菜；
			  配菜；
			  炒菜；
		  }
	
	
	
	在用 OOP 编程的过程中，我们关注的重点是程序中一个个独立的个体(对象)
我们先找到对象，然后让这些对象之间相互交流信息来完成整个事情。


2、对象、消息传递、类
   对象是存在的具体实体，具有明确定义的状态和行为。
   消息指一个对象为执行某项特定操作而向另一个对象发送的请求
   类是具有相同属性和行为的一组对象的集合


3、创建类--(属性、方法)
   在类中表示对象或实体拥有的特性时称为属性 
   对象执行的操作称为方法
   

4、类与对象的区别
    类是抽象的概念模型，为了方便的创建对象，我们把具有相同属性和操作的对象归为一类。
用同一段代码来表示。
    具有相同属性和方法的对象，肯定是同一类对象。
    

5、编写类的思路(抽象、封装)
   我们在写 Java 程序的时候，一般是先创建类，然后根据类创建对象，然后通过对象之间
传递消息来完成整个事情的逻辑操作的。

   在面对一个新的问题时，如何分析并创建出类：
   先抽象：抽取出主要内容，忽略次要内容。
   再封装：把一些不需要对外显示的属性，隐藏在类的内部。

   抽象：根据具体的应用抽取出类的相关关属性和操作
   封装：隐藏属性、方法或实现细节的过程称为封装

6、定义类、定义对象
   语法
		class <classname> {
			<body of class>	
		}

其中，
class 是创建类所使用的关键字，
<classname> 是类的名称，
<body of class> 包含属性和方法。

    类的命名规则：
      不能为 Java 中的关键字
      不能包含空格或点号“. ”
      可以下划线“_”、字母或“$”符号开头

	  
	类中的方法必须包含如下部分：
    (1)方法名
    (2)方法的主体
    (3)方法接受外部参数的列表
    (4)方法返回执行结果的返回值
	
7、定义对象的关键方法----构造方法
   每当创建给定类的实例时就调用的方法
    与类同名，但没有返回类型
    Java 为对象分配内存，初始化实例变量并调用构造方法
    两种构造方法
      参数化构造方法
      隐式构造方法

	  
	  
	  
	  
	  
	  
	  
	  
	  
   
 



	